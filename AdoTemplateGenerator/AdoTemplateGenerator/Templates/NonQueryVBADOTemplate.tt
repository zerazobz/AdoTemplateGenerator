<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Configuration" #>

<#@ parameter name="procedureName" type="System.String" #>
<#@ parameter name="connectionStringName" type="System.String" #>
<#@ parameter name="dictionaryParameters" type="System.Collections.Generic.Dictionary`2[System.String,System.Tuple`3[System.String,System.Boolean, System.String]]" #>

	'Public Function cn<#=procedureName#>(<#=String.Join(", ", dictionaryParameters.Select(kvp => $"{kvp.Key.Substring(4)} As {kvp.Value.Item3}").ToList()) #>) As Integer
	Public Function cn<#=procedureName#>(ByVal entity As Model) As Integer
		'Return _objDatos.cd<#=procedureName#>(<#=String.Join(", ", dictionaryParameters.Select(kvp => kvp.Key.Substring(4)).ToList()) #>)
		Return _objDatos.cd<#=procedureName#>(entity)
	End Function

	'Public Function cd<#=procedureName#>(<#=String.Join(", ", dictionaryParameters.Select(kvp => $"{kvp.Key.Substring(4)} As {kvp.Value.Item3}").ToList()) #>) As Integer
	Public Function cd<#=procedureName#>(ByVal entity As Model) As Integer
		ReDim campoParam(<#=dictionaryParameters.Count() - 1#>)
		listParam.Clear()
		
<#
int iIndex = 0;
foreach(var item in dictionaryParameters)
{
	if(item.Value.Item2)
	{
		
#>
		'Does not exists output parameters
<#
	}
	else
	{
#>
		campoParam(<#=iIndex++#>) = New SqlParameter("<#= item.Key #>", If(Not CType(entity.<#= item.Key.Substring(4)#>, Object) Is Nothing, CType(entity.<#= item.Key.Substring(4)#>, Object), DBNull.Value))
<#
	}
}
#>
		For Each iParam In campoParam
            listParam.Add(iParam)
        Next

        Return _objConexion.pEjecutarOperacionSP_ResultadoEjecucion("<#=procedureName#>", listParam)
	End Function


	Public Class Model
<#
foreach(var item in dictionaryParameters)
{
#>
		Property <#=item.Key.Substring(4)#> As <#=item.Value.Item3#>
<#
}
#>
	End Class

<# foreach(var item in dictionaryParameters) { #> <#=item.Key.Substring(4)#> As <#=item.Value.Item3#>,  <# } #>
<#=String.Join(", ", dictionaryParameters.Select(kvp => kvp.Key.Substring(3)).ToList()) #>
<#=String.Join(", ", dictionaryParameters.Select(kvp => $"{kvp.Key.Substring(4)} As {kvp.Value.Item3}").ToList()) #>