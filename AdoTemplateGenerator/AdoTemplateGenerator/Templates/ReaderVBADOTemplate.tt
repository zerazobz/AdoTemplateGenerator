<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Configuration" #>
<#@ import namespace="AdoTemplateGenerator.Models" #>

<#@ parameter name="procedureName" type="System.String" #>
<#@ parameter name="connectionStringName" type="System.String" #>
<#@ parameter name="dictionaryParameters" type="System.Collections.Generic.Dictionary`2[System.String,System.Tuple`3[System.String,System.Boolean, System.String]]" #>
<#@ parameter name="dictionaryColumns" type="System.Collections.Generic.Dictionary`2[System.String,AdoTemplateGenerator.Models.ReaderColumnModel]" #>
<#@ parameter name="parametersJoined" type="System.String" #>


	Module DataRowExtensions

		<System.Runtime.CompilerServices.Extension> _
        Public Function CheckIfColumnExistAndNotDBNull(row As DataRow, column As String) As Boolean
            Return If(row.Table.Columns.Contains(column) AndAlso row(column) <> DBNull.Value, True, False)
        End Function

    End Module

	'Public Function cn<#=procedureName#>(<#=String.Join(", ", dictionaryParameters.Select(kvp => $"{kvp.Key.Substring(4)} As {kvp.Value.Item3}").ToList()) #>) As Tuple(Of List(Of ResultSetModel), Integer)
	Public Function cn<#=procedureName#>(ByVal entity As Model) As Tuple(Of List(Of ResultSetModel), Integer)
		'Dim dtDataProcedure = _objDatos.cd<#=procedureName#>(<#=String.Join(", ", dictionaryParameters.Select(kvp => kvp.Key.Substring(4)).ToList()) #>)
		Dim dtDataProcedure = _objDatos.cd<#=procedureName#>(entity)
		Dim listData = New List(Of ResultSetModel)

		For Each iRow As DataRow In dtDataProcedure.Rows
            Dim myObj = Activator.CreateInstance(GetType(ResultSetModel))
            For Each iPropertyInfo In myObj.GetType().GetProperties()
                If iRow.CheckIfColumnExistAndNotDBNull(iPropertyInfo.Name) AndAlso Not Object.Equals(iRow(iPropertyInfo.Name), Nothing) Then
                    iPropertyInfo.SetValue(myObj, iRow(iPropertyInfo.Name), Nothing)
                End If
            Next
            Dim objectRecord = CType(myObj, ResultSetModel)
            listData.Add(objectRecord)
        Next

		Dim totalRows = If(listData.FirstOrDefault() Is Nothing, 0, listData.FirstOrDefault().TotRows)

		Return New Tuple(Of List(Of ResultSetModel), Integer)(listData, totalRows)
	End Function

	'Public Function cd<#=procedureName#>(<#=String.Join(", ", dictionaryParameters.Select(kvp => $"{kvp.Key.Substring(4)} As {kvp.Value.Item3}").ToList()) #>) As DataTable
	Public Function cd<#=procedureName#>(ByVal entity As Model) As DataTable
		ReDim campoParam(<#=dictionaryParameters.Count() - 1#>)
		listParam.Clear()
		
<#
int iIndex = 0;
foreach(var item in dictionaryParameters)
{
	if(item.Value.Item2)
	{
		
#>
		'Does not exists output parameters
<#
	}
	else
	{
#>
		campoParam(<#=iIndex++#>) = New SqlParameter("<#= item.Key #>", If(Not CType(entity.<#= item.Key.Substring(4)#>, Object) Is Nothing, CType(entity.<#= item.Key.Substring(4)#>, Object), DBNull.Value))
<#
	}
}
#>
		For Each iParam In campoParam
            listParam.Add(iParam)
        Next

        Return _objConexion.fdtEjecutarConsultaSP_ConParametros("<#=procedureName#>", listParam)
	End Function


	Public Class Model
<#
foreach(var item in dictionaryParameters)
{
#>
		Property <#=item.Key.Substring(4)#> As <#=item.Value.Item3#>
<#
}
#>
	End Class

	Public Class ResultSetModel
<#
foreach(var iColumn in dictionaryColumns)
{
#>
		Property <#=iColumn.Key#> As <#=iColumn.Value.DataTypeFullName#>
<#
}
#>
	End Class


<# foreach(var item in dictionaryParameters) { #> <#=item.Key.Substring(4)#> As <#=item.Value.Item3#>, <# } #>

<# foreach(var item in dictionaryParameters) { #> <#=item.Key.Substring(4)#>, <# } #>

<form>

<#foreach(var item in dictionaryColumns)
  {#>
  <input type="text" name="<#= item.Key #>" />

<#
  }
#>
</form>

	$("#").jtable({
		title: '<#=procedureName#>',
		paging: true,
        pageSize: 10,
        sorting: true,
        defaultSorting: '<#=dictionaryColumns.Select(kvp => kvp.Key).FirstOrDefault() #> ASC',
		actions: {
			listAction: '',
			createAction: '',
			editAction: '',
			deleteAction: ''
		},
		fields: {
<#
for (int i = 0; i < dictionaryColumns.Count; i++)
{
	var kvp = dictionaryColumns.ElementAt(i);
	if(i == 0)
    {
#>
			<#=kvp.Key #>: {
				key: true,
				list: false,
				edit: false,
				create: false
			},
<#
	}
	else if(i < dictionaryColumns.Count - 1)
	{
#>
			<#=kvp.Key#>: {
				title: '<#=kvp.Key#>',
				list: false,
				edit: false,
				create: false
			},
<#
    }
	else
    {
#>
			<#=kvp.Key#>: {
				title: '<#=kvp.Key#>',
				list: false,
				edit: false,
				create: false
			}
<#
    }
}
#>
		}
	});
